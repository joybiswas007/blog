package template

import (
	"fmt"
	"github.com/joybiswas007/blog/cmd/web"
	"github.com/joybiswas007/blog/internal/database"
	"github.com/joybiswas007/blog/config"
)

templ Post(blog config.Blog, post, prevPost, nextPost *database.Post) {
	{{ postURL := fmt.Sprintf("%s/posts/%s", blog.URL, post.Slug) }}
	{{
	seo := web.NewSEO(blog)
	seo.Title = post.Title
	if post.Description != nil {
		seo.Description = *post.Description
	}
	seo.Keywords = post.Tags
	seo.Canonical = postURL
	seo.OG.Type = "article"
	}}
	@Base(seo) {
		<div class="flex justify-center w-full">
			<article class="w-full max-w-3xl space-y-8">
				<header class="space-y-4">
					<h1 class="text-2xl text-[var(--color-text-primary)] font-heading">{ post.Title }</h1>
					<div class="text-[var(--color-text-secondary)] text-sm flex flex-wrap gap-3 items-center font-mono">
						<time>{ post.CreatedAt.Format("2006-01-02 3:04:05 PM") }</time>
						<span>|</span>
						<span>{ web.CalculateReadTime(post.Content) }</span>
						<span>|</span>
						<span>{ post.Author }</span>
						if len(post.Tags) > 0 {
							<span>|</span>
							for _, tag := range post.Tags {
								<a
									href={ templ.URL(fmt.Sprintf("/?tag=%s", tag)) }
									class="text-blue-400 hover:text-blue-300 transition-colors"
								>
									#{ tag }
								</a>
							}
						}
					</div>
				</header>
				<div class="prose prose-invert max-w-none">
					@web.Unsafe(web.MarkdownToHTML(blog.MarkdownTheme, post.Content))
				</div>
				<div class="pt-6 mt-8">
					<div class="flex flex-col sm:flex-row justify-between items-center gap-6">
						if prevPost != nil {
							<a
								href={ templ.URL(fmt.Sprintf("/posts/%s", prevPost.Slug)) }
								class="flex items-center text-[var(--color-text-primary)] hover:text-blue-300 group w-full sm:w-auto"
							>
								<span class="text-blue-500 mr-2 group-hover:-translate-x-1 transition-transform">←</span>
								<div class="truncate max-w-xs">
									<span class="text-xs text-blue-500 block">Previous</span>
									<span class="font-medium">{ prevPost.Title }</span>
								</div>
							</a>
						} else {
							<div class="w-full sm:w-auto"></div>
						}
						if nextPost != nil {
							<a
								href={ templ.URL(fmt.Sprintf("/posts/%s", nextPost.Slug)) }
								class="flex items-center text-[var(--color-text-primary)] hover:text-blue-300 group w-full sm:w-auto text-right justify-end"
							>
								<div class="truncate max-w-xs">
									<span class="text-xs text-blue-500 block">Next</span>
									<span class="font-medium">{ nextPost.Title }</span>
								</div>
								<span class="text-blue-500 ml-2 group-hover:translate-x-1 transition-transform">→</span>
							</a>
						} else {
							<div class="w-full sm:w-auto"></div>
						}
					</div>
				</div>
			</article>
		</div>
	}
}

templ Tags(blog config.Blog, tags []*database.Tag) {
	{{
	seo := web.NewSEO(blog)
	seo.Title = "Tags"
	seo.Canonical = fmt.Sprintf("%s/tags", blog.URL)
	}}
	@Base(seo) {
		<div class="flex justify-center w-full">
			<div class="space-y-6 w-full max-w-3xl">
				<div class="pl-4 ml-2 space-y-1">
					if len(tags) > 0 {
						for _, tag := range tags {
							<a
								href={ templ.URL(fmt.Sprintf("/?tag=%s", tag.Name)) }
								class="flex items-baseline gap-2 p-2 rounded group"
							>
								<span class="text-blue-400 group-hover:text-blue-300">></span>
								<span class="text-blue-200 group-hover:text-blue-300 text-base">{ tag.Name }</span>
								<span class="text-blue-500 group-hover:text-blue-300 text-sm">({ tag.PostCount })</span>
							</a>
						}
					} else {
						<div class="flex items-baseline gap-2 text-[var(--color-text-secondary)]">
							<span class="text-blue-500">></span>
							<p>No tags found</p>
						</div>
					}
				</div>
			</div>
		</div>
	}
}

templ Archives(blog config.Blog, lists []database.YearlyStats) {
	{{
	seo := web.NewSEO(blog)
	seo.Title = "Archives"
	seo.Canonical = fmt.Sprintf("%s/archives", blog.URL)
	}}
	@Base(seo) {
		<div class="flex justify-center w-full">
			<div class="space-y-10 w-full max-w-3xl">
				<div class="pl-4 ml-2 space-y-10">
					<!-- Feed section -->
					<section class="space-y-2">
						<p class="flex items-baseline gap-2">
							<span class="text-blue-500 text-lg">&gt;</span>
							<span>Blog feed available at:</span>
						</p>
						<a
							target="_blank"
							href="/rss.xml"
							class="inline-flex items-center gap-2 font-mono text-blue-400 hover:text-blue-300 transition-colors"
						>
							<span class="text-blue-400 text-lg">&gt;</span>
							<span>/rss.xml</span>
						</a>
					</section>
					<!-- Archives by year -->
					<section class="space-y-3">
						<h2 class="text-lg text-[var(--color-text-primary)] font-heading">By year</h2>
						<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-y-2 gap-x-8">
							for _, list := range lists {
								<a
									href={ templ.URL(fmt.Sprintf("/archives/%d", list.Year)) }
									class="group flex items-center gap-2 font-mono text-blue-200 hover:text-blue-300 transition-colors"
								>
									<span class="text-blue-400 text-lg">&gt;</span>
									<span>
										{ fmt.Sprintf("%d", list.Year) }
										<span class="text-[var(--color-text-secondary)] text-xs ml-1 group-hover:text-blue-300 transition-colors">({ list.PostCount })</span>
									</span>
								</a>
							}
						</div>
					</section>
				</div>
			</div>
		</div>
	}
}

templ ArchiveByYear(blog config.Blog, year int, posts []database.Post) {
	{{
	seo := web.NewSEO(blog)
	seo.Title = fmt.Sprintf("Archives - %d", year)
	seo.Canonical = fmt.Sprintf("%s/archives/%d", blog.URL, year)
	}}
	@Base(seo) {
		<div class="flex justify-center w-full">
			<div class="space-y-6 w-full max-w-3xl">
				<div class="pl-4 ml-2 space-y-4">
					if len(posts) == 0 {
						<div class="flex items-baseline gap-2 text-[var(--color-text-secondary)]">
							<span class="text-blue-500">&gt;</span>
							<p>No posts found in archives</p>
						</div>
					} else {
						<div class="space-y-2">
							<div class="flex items-baseline gap-2 text-blue-500 text-xs font-mono">
								<span>&gt;</span>
								<span class="w-[22rem] sm:w-[28rem]">TITLE</span>
								<span class="w-28 sm:w-32">DATE</span>
							</div>
							for _, post := range posts {
								<a
									href={ templ.URL(fmt.Sprintf("/posts/%s", post.Slug)) }
									class="flex items-baseline gap-2 group transition-colors"
								>
									<span class="text-blue-500 group-hover:text-blue-300">&gt;</span>
									<span class="w-[22rem] sm:w-[28rem] truncate text-blue-200 group-hover:text-blue-300 transition-colors">
										{ post.Title }
									</span>
									<span class="text-blue-400 text-xs w-28 sm:w-32 group-hover:text-blue-300 transition-colors">
										{ post.CreatedAt.Format("2006-01-02") }
									</span>
								</a>
							}
						</div>
					}
				</div>
				<div class="pl-4 ml-2 pt-4">
					<a
						href="/archives"
						class="flex items-center gap-2 text-blue-500 hover:text-blue-300 transition-colors"
					>
						<span>Back to archives</span>
					</a>
				</div>
			</div>
		</div>
	}
}
